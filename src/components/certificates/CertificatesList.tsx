
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { useAuth } from '@/contexts/AuthContext';
import { useSchoolScopedData } from '@/hooks/useSchoolScopedData';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Award, Download, Eye, Trash2 } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';

const CertificatesList = () => {
  const { user } = useAuth();
  const { schoolId } = useSchoolScopedData();
  const { toast } = useToast();

  const { data: certificates, isLoading, refetch } = useQuery({
    queryKey: ['certificates', schoolId],
    queryFn: async () => {
      let query = supabase
        .from('certificates')
        .select(`
          *,
          student:students(name, admission_number),
          class:classes(name, level, stream),
          generated_by_profile:profiles!certificates_generated_by_fkey(name)
        `)
        .order('generated_at', { ascending: false });

      if (user?.role !== 'edufam_admin') {
        query = query.eq('school_id', schoolId);
      }
      
      const { data, error } = await query;
      
      if (error) throw error;
      return data || [];
    },
    enabled: !!schoolId || user?.role === 'edufam_admin'
  });

  const handleDelete = async (certificateId: string) => {
    try {
      const { error } = await supabase
        .from('certificates')
        .delete()
        .eq('id', certificateId);

      if (error) throw error;

      toast({
        title: "Success",
        description: "Certificate deleted successfully",
      });
      
      refetch();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to delete certificate",
        variant: "destructive"
      });
    }
  };

  const handleDownload = (certificate: any) => {
    // This would typically generate and download a PDF
    toast({
      title: "Download",
      description: "Certificate download would be implemented here",
    });
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <div className="animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"></div>
          <p>Loading certificates...</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Award className="h-5 w-5" />
          Generated Certificates
          <Badge variant="secondary" className="ml-auto">
            {certificates?.length || 0} Total
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        {!certificates || certificates.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <Award className="h-12 w-12 mx-auto mb-4 text-gray-300" />
            <p className="text-lg font-medium">No certificates generated yet</p>
            <p className="text-sm">Generate academic certificates for students to get started.</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Student</TableHead>
                  <TableHead>Class</TableHead>
                  <TableHead>Academic Year</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead>Generated Date</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {certificates.map((certificate) => (
                  <TableRow key={certificate.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{certificate.student?.name}</div>
                        <div className="text-sm text-muted-foreground">
                          {certificate.student?.admission_number}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="text-sm">
                        <div className="font-medium">{certificate.class?.name}</div>
                        {certificate.class?.stream && (
                          <div className="text-muted-foreground">{certificate.class.stream}</div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{certificate.academic_year}</TableCell>
                    <TableCell>{certificate.generated_by_profile?.name}</TableCell>
                    <TableCell className="text-sm">
                      {new Date(certificate.generated_at).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDownload(certificate)}
                        >
                          <Download className="h-4 w-4 mr-1" />
                          Download
                        </Button>
                        {(user?.role === 'principal' || user?.role === 'edufam_admin') && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleDelete(certificate.id)}
                          >
                            <Trash2 className="h-4 w-4 mr-1" />
                            Delete
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default CertificatesList;
