
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { useAuth } from '@/contexts/AuthContext';
import { useReports } from '@/hooks/useReports';
import { FileText, Download, Trash2 } from 'lucide-react';

const ReportsList = () => {
  const { user } = useAuth();
  const { reports, isLoading, deleteReport, isDeleting } = useReports();

  const getReportTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      'individual_academic': 'Individual Academic',
      'class_academic': 'Class Academic',
      'financial': 'Financial',
      'attendance': 'Attendance'
    };
    return labels[type] || type;
  };

  const getReportTypeBadgeColor = (type: string) => {
    const colors: Record<string, string> = {
      'individual_academic': 'bg-blue-100 text-blue-800',
      'class_academic': 'bg-green-100 text-green-800',
      'financial': 'bg-yellow-100 text-yellow-800',
      'attendance': 'bg-purple-100 text-purple-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const handleDownload = (report: any) => {
    // This would typically generate and download the report
    console.log('Downloading report:', report);
    // For now, just show the report data in console
    console.log('Report data:', report.report_data);
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <div className="animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"></div>
          <p>Loading reports...</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Generated Reports
          <Badge variant="secondary" className="ml-auto">
            {reports?.length || 0} Total
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        {!reports || reports.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <FileText className="h-12 w-12 mx-auto mb-4 text-gray-300" />
            <p className="text-lg font-medium">No reports generated yet</p>
            <p className="text-sm">Generate academic, financial, or attendance reports to get started.</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Report Type</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead>Generated Date</TableHead>
                  <TableHead>Filters</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {reports.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell>
                      <Badge className={getReportTypeBadgeColor(report.report_type)}>
                        {getReportTypeLabel(report.report_type)}
                      </Badge>
                    </TableCell>
                    <TableCell>{report.generated_by_profile?.name}</TableCell>
                    <TableCell className="text-sm">
                      {new Date(report.generated_at).toLocaleDateString()}
                    </TableCell>
                    <TableCell className="text-sm">
                      {report.filters && Object.keys(report.filters).length > 0 ? (
                        <div className="space-y-1">
                          {Object.entries(report.filters).map(([key, value]) => (
                            <div key={key} className="text-xs">
                              <strong>{key}:</strong> {value as string}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <span className="text-muted-foreground">No filters</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDownload(report)}
                        >
                          <Download className="h-4 w-4 mr-1" />
                          Download
                        </Button>
                        {(user?.role === 'principal' || user?.role === 'edufam_admin') && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => deleteReport(report.id)}
                            disabled={isDeleting}
                          >
                            <Trash2 className="h-4 w-4 mr-1" />
                            Delete
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ReportsList;
