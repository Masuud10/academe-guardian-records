import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Building2,
  Users,
  GraduationCap,
  Calendar,
  Phone,
  Mail,
  MapPin,
  DollarSign,
  TrendingUp,
  CheckCircle,
  XCircle,
  BookOpen,
  User,
  FileText,
  Clock,
  Award,
  Download,
  Eye,
  RefreshCw,
  AlertCircle,
  BarChart3,
  School,
  CreditCard,
  UserCheck,
  AlertTriangle,
  Info,
} from "lucide-react";
import { format } from "date-fns";
import { useToast } from "@/hooks/use-toast";
import {
  EnhancedReportService,
  EnhancedReportData,
  ExportOptions,
} from "@/services/enhancedReportService";
import { useAcademicModuleIntegration } from "@/hooks/useAcademicModuleIntegration";

interface EnhancedReportDisplayProps {
  reportData: EnhancedReportData;
  onExport?: (format: "pdf" | "excel") => void;
  onRefresh?: () => void;
  showExportControls?: boolean;
  showPreview?: boolean;
  showExportButtons?: boolean;
  userRole?: string;
}

const EnhancedReportDisplay: React.FC<EnhancedReportDisplayProps> = ({
  reportData,
  onExport,
  showExportControls = true,
  showPreview = true,
  userRole,
}) => {
  const { toast } = useToast();
  const [isExporting, setIsExporting] = useState(false);
  const [activeTab, setActiveTab] = useState("summary");
  const [dataValidation, setDataValidation] = useState<{
    isValid: boolean;
    errors: string[];
    warnings: string[];
  }>({ isValid: true, errors: [], warnings: [] });

  const {
    context,
    isLoading,
    error: academicError,
    data: academicData,
    isValid: academicIsValid,
    refreshData,
    currentPeriod,
    validation: academicValidation,
  } = useAcademicModuleIntegration(["reports"]);

  // Validate report data on mount
  useEffect(() => {
    validateReportData();
  }, [reportData]);

  const validateReportData = () => {
    const errors: string[] = [];
    const warnings: string[] = [];

    // Check required fields
    if (!reportData.title) errors.push("Report title is missing");
    if (!reportData.generatedAt) errors.push("Generation timestamp is missing");
    if (!reportData.generatedBy)
      errors.push("Generated by information is missing");
    if (!reportData.role) errors.push("User role is missing");

    // Check content data
    if (!reportData.content || Object.keys(reportData.content).length === 0) {
      errors.push("No report content available");
    } else {
      Object.entries(reportData.content).forEach(([key, data]) => {
        if (Array.isArray(data) && data.length === 0) {
          warnings.push(
            `No data available for ${key
              .replace(/([A-Z])/g, " $1")
              .toLowerCase()}`
          );
        }
      });
    }

    // Check summary data
    if (!reportData.summary || Object.keys(reportData.summary).length === 0) {
      warnings.push("No summary statistics available");
    }

    // Role-based validation
    if (userRole && reportData.role !== userRole) {
      warnings.push(
        `Report was generated for ${reportData.role} role, but you are ${userRole}`
      );
    }

    setDataValidation({
      isValid: errors.length === 0,
      errors,
      warnings,
    });
  };

  const handleExport = async (format: "pdf" | "excel") => {
    if (!dataValidation.isValid) {
      toast({
        title: "❌ Export Failed",
        description: "Cannot export report with validation errors",
        variant: "destructive",
      });
      return;
    }

    setIsExporting(true);
    try {
      const options: ExportOptions = {
        format,
        includeCharts: true,
        includeSummary: true,
      };

      if (format === "pdf") {
        await EnhancedReportService.generatePDF(reportData, options);
      } else {
        await EnhancedReportService.generateExcel(reportData, options);
      }

      toast({
        title: `✅ ${format.toUpperCase()} Report Generated Successfully`,
        description: `Professional ${format.toUpperCase()} report with EduFam branding has been downloaded`,
      });

      if (onExport) {
        onExport(format);
      }
    } catch (error) {
      console.error(`Export error:`, error);
      toast({
        title: `❌ ${format.toUpperCase()} Export Failed`,
        description:
          error instanceof Error
            ? error.message
            : "An error occurred during export",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const renderSchoolInfo = () => {
    if (!reportData.schoolInfo) return null;

    return (
      <Card className="mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
        <CardContent className="p-6">
          <div className="flex items-center gap-3 mb-4">
            <Building2 className="h-8 w-8 text-blue-600" />
            <div>
              <h2 className="text-2xl font-bold text-gray-900">
                {reportData.schoolInfo.name}
              </h2>
              <p className="text-gray-600">Educational Institution</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {reportData.schoolInfo.address && (
              <div className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-gray-500" />
                <span className="text-sm">{reportData.schoolInfo.address}</span>
              </div>
            )}
            {reportData.schoolInfo.phone && (
              <div className="flex items-center gap-2">
                <Phone className="h-4 w-4 text-gray-500" />
                <span className="text-sm">{reportData.schoolInfo.phone}</span>
              </div>
            )}
            {reportData.schoolInfo.email && (
              <div className="flex items-center gap-2">
                <Mail className="h-4 w-4 text-gray-500" />
                <span className="text-sm">{reportData.schoolInfo.email}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderReportHeader = () => {
    return (
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {reportData.title}
              </h1>
              <div className="space-y-1 text-sm text-gray-600">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  <span>
                    Generated on:{" "}
                    {format(new Date(reportData.generatedAt), "PPP 'at' p")}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4" />
                  <span>
                    Generated by: {reportData.generatedBy} (
                    {reportData.role.replace("_", " ")})
                  </span>
                </div>
                {reportData.filters && (
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span>
                      Filters:{" "}
                      {Object.entries(reportData.filters)
                        .filter(
                          ([_, value]) => value !== undefined && value !== null
                        )
                        .map(([key, value]) => `${key}: ${value}`)
                        .join(", ")}
                    </span>
                  </div>
                )}
              </div>
            </div>
            <div className="text-right space-y-2">
              <Badge variant="outline" className="text-sm">
                {reportData.role.replace("_", " ").toUpperCase()}
              </Badge>
              <div className="text-xs text-gray-500">
                Report ID: {reportData.id}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderSummarySection = () => {
    if (!reportData.summary || Object.keys(reportData.summary).length === 0) {
      return (
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-5 w-5" />
              Summary Statistics
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center text-gray-500 py-8">
              <Info className="h-8 w-8 mx-auto mb-2" />
              <p>No summary statistics available</p>
            </div>
          </CardContent>
        </Card>
      );
    }

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Summary Statistics
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {Object.entries(reportData.summary).map(([key, value]) => (
              <div
                key={key}
                className={`p-4 rounded-lg border ${getSummaryColor(key)}`}
              >
                <div className="flex items-center gap-2 mb-2">
                  {getSummaryIcon(key)}
                  <span className="font-semibold text-sm">
                    {key
                      .replace(/([A-Z])/g, " $1")
                      .replace(/^\w/, (c) => c.toUpperCase())}
                  </span>
                </div>
                <p className="text-2xl font-bold">
                  {formatSummaryValue(key, value)}
                </p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderContentSections = () => {
    if (!reportData.content || Object.keys(reportData.content).length === 0) {
      return (
        <Card>
          <CardContent className="text-center text-gray-500 py-8">
            <FileText className="h-8 w-8 mx-auto mb-2" />
            <p>No report content available</p>
          </CardContent>
        </Card>
      );
    }

    return (
      <div className="space-y-6">
        {Object.entries(reportData.content).map(([key, data]) => {
          if (!Array.isArray(data) || data.length === 0) return null;

          return (
            <Card key={key}>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {getContentIcon(key)}
                  {key
                    .replace(/([A-Z])/g, " $1")
                    .replace(/^\w/, (c) => c.toUpperCase())}
                  <Badge variant="secondary">{data.length} records</Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        {Object.keys(data[0]).map((header) => (
                          <TableHead key={header}>
                            {header
                              .replace(/([A-Z])/g, " $1")
                              .replace(/^\w/, (c) => c.toUpperCase())}
                          </TableHead>
                        ))}
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {data.slice(0, 10).map((row, index) => (
                        <TableRow key={index}>
                          {Object.values(row).map((value, cellIndex) => (
                            <TableCell key={cellIndex}>
                              {formatCellValue(value)}
                            </TableCell>
                          ))}
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  {data.length > 10 && (
                    <div className="text-center text-sm text-gray-500 mt-4">
                      Showing first 10 of {data.length} records
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    );
  };

  const renderValidationSection = () => {
    if (
      dataValidation.errors.length === 0 &&
      dataValidation.warnings.length === 0
    ) {
      return null;
    }

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            Data Validation
          </CardTitle>
        </CardHeader>
        <CardContent>
          {dataValidation.errors.length > 0 && (
            <div className="mb-4">
              <h4 className="font-semibold text-red-600 mb-2 flex items-center gap-2">
                <XCircle className="h-4 w-4" />
                Errors ({dataValidation.errors.length})
              </h4>
              <ul className="list-disc list-inside space-y-1 text-sm text-red-600">
                {dataValidation.errors.map((error, index) => (
                  <li key={index}>{error}</li>
                ))}
              </ul>
            </div>
          )}
          {dataValidation.warnings.length > 0 && (
            <div>
              <h4 className="font-semibold text-yellow-600 mb-2 flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                Warnings ({dataValidation.warnings.length})
              </h4>
              <ul className="list-disc list-inside space-y-1 text-sm text-yellow-600">
                {dataValidation.warnings.map((warning, index) => (
                  <li key={index}>{warning}</li>
                ))}
              </ul>
            </div>
          )}
        </CardContent>
      </Card>
    );
  };

  const renderExportControls = () => {
    if (!showExportControls) return null;

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Download className="h-5 w-5" />
            Export Options
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-3">
            <Button
              onClick={() => handleExport("pdf")}
              disabled={isExporting || !dataValidation.isValid}
              className="flex items-center gap-2"
            >
              {isExporting ? (
                <RefreshCw className="h-4 w-4 animate-spin" />
              ) : (
                <FileText className="h-4 w-4" />
              )}
              Export PDF
            </Button>
            <Button
              onClick={() => handleExport("excel")}
              disabled={isExporting || !dataValidation.isValid}
              variant="outline"
              className="flex items-center gap-2"
            >
              {isExporting ? (
                <RefreshCw className="h-4 w-4 animate-spin" />
              ) : (
                <BarChart3 className="h-4 w-4" />
              )}
              Export Excel
            </Button>
          </div>
          {!dataValidation.isValid && (
            <p className="text-sm text-red-600 mt-2">
              Cannot export report with validation errors
            </p>
          )}
        </CardContent>
      </Card>
    );
  };

  const getSummaryIcon = (key: string): React.ReactNode => {
    const iconMap: Record<string, React.ReactNode> = {
      totalSchools: <School className="h-4 w-4" />,
      totalUsers: <Users className="h-4 w-4" />,
      totalStudents: <User className="h-4 w-4" />,
      totalGrades: <GraduationCap className="h-4 w-4" />,
      totalAttendance: <UserCheck className="h-4 w-4" />,
      totalFees: <DollarSign className="h-4 w-4" />,
      totalTransactions: <CreditCard className="h-4 w-4" />,
      averageGrade: <Award className="h-4 w-4" />,
      attendanceRate: <CheckCircle className="h-4 w-4" />,
      collectionRate: <TrendingUp className="h-4 w-4" />,
    };
    return iconMap[key] || <BarChart3 className="h-4 w-4" />;
  };

  const getSummaryColor = (key: string) => {
    const colorMap: Record<string, string> = {
      totalSchools: "bg-blue-50 border-blue-200 text-blue-800",
      totalUsers: "bg-green-50 border-green-200 text-green-800",
      totalStudents: "bg-purple-50 border-purple-200 text-purple-800",
      totalGrades: "bg-orange-50 border-orange-200 text-orange-800",
      totalAttendance: "bg-teal-50 border-teal-200 text-teal-800",
      totalFees: "bg-yellow-50 border-yellow-200 text-yellow-800",
      totalTransactions: "bg-indigo-50 border-indigo-200 text-indigo-800",
      averageGrade: "bg-pink-50 border-pink-200 text-pink-800",
      attendanceRate: "bg-emerald-50 border-emerald-200 text-emerald-800",
      collectionRate: "bg-cyan-50 border-cyan-200 text-cyan-800",
    };
    return colorMap[key] || "bg-gray-50 border-gray-200 text-gray-800";
  };

  const getContentIcon = (key: string) => {
    const iconMap: Record<string, React.ReactNode> = {
      schools: <School className="h-5 w-5" />,
      users: <Users className="h-5 w-5" />,
      students: <User className="h-5 w-5" />,
      grades: <GraduationCap className="h-5 w-5" />,
      attendance: <UserCheck className="h-5 w-5" />,
      fees: <DollarSign className="h-5 w-5" />,
      transactions: <CreditCard className="h-5 w-5" />,
      mpesaTransactions: <CreditCard className="h-5 w-5" />,
    };
    return iconMap[key] || <FileText className="h-5 w-5" />;
  };

  const formatCellValue = (value: unknown): string => {
    if (value === null || value === undefined) return "N/A";
    if (typeof value === "object") return JSON.stringify(value);
    if (typeof value === "boolean") return value ? "Yes" : "No";
    if (typeof value === "number") {
      // Check if it's a percentage
      if (value >= 0 && value <= 100) return `${value}%`;
      // Check if it's currency
      if (value > 1000) return `KES ${value.toLocaleString()}`;
      return value.toString();
    }
    return String(value);
  };

  const formatSummaryValue = (key: string, value: unknown): string => {
    if (typeof value === "number") {
      if (
        key.toLowerCase().includes("rate") ||
        key.toLowerCase().includes("percentage")
      ) {
        return `${value}%`;
      }
      if (
        key.toLowerCase().includes("amount") ||
        key.toLowerCase().includes("fees")
      ) {
        return `KES ${value.toLocaleString()}`;
      }
      return value.toLocaleString();
    }
    return String(value);
  };

  if (!showPreview) {
    return renderExportControls();
  }

  return (
    <div className="space-y-6">
      {renderValidationSection()}
      {renderSchoolInfo()}
      {renderReportHeader()}
      {renderExportControls()}

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="content">Content</TabsTrigger>
        </TabsList>

        <TabsContent value="summary" className="space-y-4">
          {renderSummarySection()}
        </TabsContent>

        <TabsContent value="content" className="space-y-4">
          {renderContentSections()}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default EnhancedReportDisplay;
