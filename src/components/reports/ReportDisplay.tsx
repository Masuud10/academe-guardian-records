import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ReportData } from "@/services/unifiedReportService";
import { format } from "date-fns";
import {
  Building2,
  Users,
  GraduationCap,
  Calendar,
  Phone,
  Mail,
  MapPin,
  DollarSign,
  TrendingUp,
  CheckCircle,
  XCircle,
  BookOpen,
  User,
  FileText,
  Clock,
  Award,
} from "lucide-react";

interface ReportDisplayProps {
  reportData: ReportData;
}

const ReportDisplay: React.FC<ReportDisplayProps> = ({ reportData }) => {
  const renderSchoolInfo = () => {
    if (!reportData.schoolInfo) return null;
    return (
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border mb-4">
        <div className="flex items-center gap-3 mb-4">
          <Building2 className="h-8 w-8 text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {reportData.schoolInfo.name}
            </h2>
            <p className="text-gray-600">Educational Institution</p>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {reportData.schoolInfo.address && (
            <div className="flex items-center gap-2">
              <MapPin className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{reportData.schoolInfo.address}</span>
            </div>
          )}
          {reportData.schoolInfo.phone && (
            <div className="flex items-center gap-2">
              <Phone className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{reportData.schoolInfo.phone}</span>
            </div>
          )}
          {reportData.schoolInfo.email && (
            <div className="flex items-center gap-2">
              <Mail className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{reportData.schoolInfo.email}</span>
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderReportHeader = () => {
    return (
      <div className="bg-white p-6 rounded-lg border mb-6">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              {reportData.title}
            </h1>
            <div className="space-y-1 text-sm text-gray-600">
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                <span>
                  Generated on:{" "}
                  {format(new Date(reportData.generatedAt), "PPP 'at' p")}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <User className="h-4 w-4" />
                <span>
                  Generated by: {reportData.generatedBy} (
                  {reportData.role.replace("_", " ")})
                </span>
              </div>
            </div>
          </div>
          <div className="text-right">
            <Badge variant="outline" className="text-sm">
              {reportData.role.replace("_", " ").toUpperCase()}
            </Badge>
          </div>
        </div>
      </div>
    );
  };

  const renderSchoolsSummary = () => {
    const schools = reportData.content.schools;
    if (!schools || !Array.isArray(schools)) return null;
    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building2 className="h-5 w-5" />
            Schools Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Building2 className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-800">
                  Total Schools
                </span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">
                {schools.length}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-600" />
                <span className="font-semibold text-green-800">
                  Active Schools
                </span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">
                {schools.filter((s) => s.status === "active").length}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Users className="h-5 w-5 text-purple-600" />
                <span className="font-semibold text-purple-800">
                  Total Students
                </span>
              </div>
              <p className="text-2xl font-bold text-purple-600 mt-2">
                {schools.reduce(
                  (sum, school) => sum + (school.max_students || 0),
                  0
                )}
              </p>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-orange-600" />
                <span className="font-semibold text-orange-800">
                  This Month
                </span>
              </div>
              <p className="text-2xl font-bold text-orange-600 mt-2">
                {
                  schools.filter((s) => {
                    const createdAt = new Date(s.created_at);
                    const thirtyDaysAgo = new Date();
                    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                    return createdAt >= thirtyDaysAgo;
                  }).length
                }
              </p>
            </div>
          </div>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>School Name</TableHead>
                <TableHead>Address</TableHead>
                <TableHead>Phone</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Subscription</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {schools.map((school, index) => (
                <TableRow key={school.id || index}>
                  <TableCell className="font-medium">{school.name}</TableCell>
                  <TableCell>{school.address || "N/A"}</TableCell>
                  <TableCell>{school.phone || "N/A"}</TableCell>
                  <TableCell>{school.email || "N/A"}</TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        school.status === "active" ? "default" : "secondary"
                      }
                      className="text-xs"
                    >
                      {school.status || "Active"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="text-xs">
                      {school.subscription_plan || "Basic"}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  };

  const renderUsersSummary = () => {
    const users = reportData.content.users;
    if (!users || !Array.isArray(users)) return null;
    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Users Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Users className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-800">Total Users</span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">
                {users.length}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <User className="h-5 w-5 text-green-600" />
                <span className="font-semibold text-green-800">Teachers</span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">
                {users.filter((u) => u.role === "teacher").length}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <GraduationCap className="h-5 w-5 text-purple-600" />
                <span className="font-semibold text-purple-800">Students</span>
              </div>
              <p className="text-2xl font-bold text-purple-600 mt-2">
                {users.filter((u) => u.role === "student").length}
              </p>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <User className="h-5 w-5 text-orange-600" />
                <span className="font-semibold text-orange-800">Parents</span>
              </div>
              <p className="text-2xl font-bold text-orange-600 mt-2">
                {users.filter((u) => u.role === "parent").length}
              </p>
            </div>
          </div>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Role</TableHead>
                <TableHead>School</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Joined</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {users.slice(0, 10).map((user, index) => (
                <TableRow key={user.id || index}>
                  <TableCell className="font-medium">{user.name}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>
                    <Badge variant="outline" className="text-xs">
                      {user.role?.replace("_", " ")}
                    </Badge>
                  </TableCell>
                  <TableCell>{user.school_name || "N/A"}</TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        user.status === "active" ? "default" : "secondary"
                      }
                      className="text-xs"
                    >
                      {user.status || "Active"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {user.created_at
                      ? format(new Date(user.created_at), "MMM dd, yyyy")
                      : "N/A"}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  };

  const renderFinancialSummary = () => {
    const transactions = reportData.content.transactions;
    const fees = reportData.content.fees;
    const mpesaTransactions = reportData.content.mpesaTransactions;

    if (!transactions && !fees && !mpesaTransactions) return null;

    const allTransactions = [
      ...(Array.isArray(transactions) ? transactions : []),
      ...(Array.isArray(mpesaTransactions) ? mpesaTransactions : []),
    ];

    const totalRevenue = allTransactions.reduce(
      (sum, txn) => sum + (parseFloat(String(txn?.amount || 0)) || 0),
      0
    );

    const totalFees = Array.isArray(fees)
      ? fees.reduce(
          (sum, fee) => sum + (parseFloat(String(fee?.amount || 0)) || 0),
          0
        )
      : 0;

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <DollarSign className="h-5 w-5" />
            Financial Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <DollarSign className="h-5 w-5 text-green-600" />
                <span className="font-semibold text-green-800">
                  Total Revenue
                </span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">
                KES {totalRevenue.toLocaleString()}
              </p>
            </div>
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-800">
                  Total Transactions
                </span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">
                {allTransactions.length}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-purple-600" />
                <span className="font-semibold text-purple-800">
                  Total Fees
                </span>
              </div>
              <p className="text-2xl font-bold text-purple-600 mt-2">
                KES {totalFees.toLocaleString()}
              </p>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-orange-600" />
                <span className="font-semibold text-orange-800">
                  Success Rate
                </span>
              </div>
              <p className="text-2xl font-bold text-orange-600 mt-2">
                {allTransactions.length > 0
                  ? `${(
                      (allTransactions.filter((t) => t.status === "success")
                        .length /
                        allTransactions.length) *
                      100
                    ).toFixed(1)}%`
                  : "0%"}
              </p>
            </div>
          </div>
          {allTransactions.length > 0 && (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Transaction ID</TableHead>
                  <TableHead>Student</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {allTransactions.slice(0, 10).map((txn, index) => (
                  <TableRow key={String(txn?.id || index)}>
                    <TableCell className="font-medium">
                      {String(txn?.transaction_id || txn?.id || "N/A")}
                    </TableCell>
                    <TableCell>
                      {String(
                        txn?.students?.name || txn?.student_name || "N/A"
                      )}
                    </TableCell>
                    <TableCell>
                      KES{" "}
                      {parseFloat(String(txn?.amount || 0)).toLocaleString()}
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className="text-xs">
                        {String(txn?.payment_method || txn?.type || "Payment")}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          String(txn?.status) === "success"
                            ? "default"
                            : "secondary"
                        }
                        className="text-xs"
                      >
                        {String(txn?.status || "Unknown")}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {txn?.created_at
                        ? format(
                            new Date(String(txn.created_at)),
                            "MMM dd, yyyy"
                          )
                        : "N/A"}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    );
  };

  const renderGradesSummary = () => {
    const grades = reportData.content.grades;
    if (!grades || !Array.isArray(grades)) return null;

    const averageGrade =
      grades.length > 0
        ? (
            grades.reduce(
              (sum, grade) => sum + (parseFloat(grade.percentage) || 0),
              0
            ) / grades.length
          ).toFixed(1)
        : "0.0";

    const subjectPerformance = grades.reduce((acc, grade) => {
      const subject = grade.subjects?.name || grade.subject_name || "Unknown";
      if (!acc[subject]) {
        acc[subject] = { total: 0, count: 0 };
      }
      acc[subject].total += parseFloat(grade.percentage) || 0;
      acc[subject].count += 1;
      return acc;
    }, {} as Record<string, { total: number; count: number }>);

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Award className="h-5 w-5" />
            Academic Performance Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Award className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-800">
                  Total Grades
                </span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">
                {grades.length}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-green-600" />
                <span className="font-semibold text-green-800">
                  Average Grade
                </span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">
                {averageGrade}%
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-purple-600" />
                <span className="font-semibold text-purple-800">Subjects</span>
              </div>
              <p className="text-2xl font-bold text-purple-600 mt-2">
                {Object.keys(subjectPerformance).length}
              </p>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Users className="h-5 w-5 text-orange-600" />
                <span className="font-semibold text-orange-800">Students</span>
              </div>
              <p className="text-2xl font-bold text-orange-600 mt-2">
                {
                  new Set(grades.map((g) => g.student_id || g.students?.id))
                    .size
                }
              </p>
            </div>
          </div>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Student</TableHead>
                <TableHead>Subject</TableHead>
                <TableHead>Grade</TableHead>
                <TableHead>Percentage</TableHead>
                <TableHead>Class</TableHead>
                <TableHead>Date</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {grades.slice(0, 10).map((grade, index) => (
                <TableRow key={grade.id || index}>
                  <TableCell className="font-medium">
                    {grade.students?.name || grade.student_name || "N/A"}
                  </TableCell>
                  <TableCell>
                    {grade.subjects?.name || grade.subject_name || "N/A"}
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="text-xs">
                      {grade.grade || "N/A"}
                    </Badge>
                  </TableCell>
                  <TableCell>{grade.percentage || 0}%</TableCell>
                  <TableCell>
                    {grade.classes?.name || grade.class_name || "N/A"}
                  </TableCell>
                  <TableCell>
                    {grade.created_at
                      ? format(new Date(grade.created_at), "MMM dd, yyyy")
                      : "N/A"}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  };

  const renderAttendanceSummary = () => {
    const attendance = reportData.content.attendance;
    if (!attendance || !Array.isArray(attendance)) return null;

    const totalDays = attendance.length;
    const presentDays = attendance.filter((a) => a.status === "present").length;
    const absentDays = attendance.filter((a) => a.status === "absent").length;
    const attendanceRate =
      totalDays > 0 ? ((presentDays / totalDays) * 100).toFixed(1) : "0.0";

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Attendance Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-800">Total Days</span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">
                {totalDays}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-600" />
                <span className="font-semibold text-green-800">
                  Present Days
                </span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">
                {presentDays}
              </p>
            </div>
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <XCircle className="h-5 w-5 text-red-600" />
                <span className="font-semibold text-red-800">Absent Days</span>
              </div>
              <p className="text-2xl font-bold text-red-600 mt-2">
                {absentDays}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-purple-600" />
                <span className="font-semibold text-purple-800">
                  Attendance Rate
                </span>
              </div>
              <p className="text-2xl font-bold text-purple-600 mt-2">
                {attendanceRate}%
              </p>
            </div>
          </div>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Student</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Class</TableHead>
                <TableHead>Time</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {attendance.slice(0, 10).map((record, index) => (
                <TableRow key={record.id || index}>
                  <TableCell className="font-medium">
                    {record.students?.name || record.student_name || "N/A"}
                  </TableCell>
                  <TableCell>
                    {record.date
                      ? format(new Date(record.date), "MMM dd, yyyy")
                      : "N/A"}
                  </TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        record.status === "present" ? "default" : "secondary"
                      }
                      className="text-xs"
                    >
                      {record.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {record.classes?.name || record.class_name || "N/A"}
                  </TableCell>
                  <TableCell>
                    {record.created_at
                      ? format(new Date(record.created_at), "HH:mm")
                      : "N/A"}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  };

  const renderFooter = () => {
    return (
      <div className="bg-gray-50 p-6 rounded-lg border mt-6">
        <div className="text-center text-sm text-gray-600">
          <p>
            This report was generated by the EduFam Education Management System
          </p>
          <p className="mt-1">
            For questions or support, please contact your system administrator
          </p>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6 print:space-y-4">
      {renderSchoolInfo()}
      {renderReportHeader()}
      {renderSchoolsSummary()}
      {renderUsersSummary()}
      {renderFinancialSummary()}
      {renderGradesSummary()}
      {renderAttendanceSummary()}
      {renderFooter()}
    </div>
  );
};

export default ReportDisplay;
