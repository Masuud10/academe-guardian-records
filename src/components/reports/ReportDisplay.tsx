import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ReportData } from "@/services/unifiedReportService";
import { format } from "date-fns";
import {
  Building2,
  Users,
  GraduationCap,
  Calendar,
  Phone,
  Mail,
  MapPin,
  DollarSign,
  TrendingUp,
  CheckCircle,
  XCircle,
  BookOpen,
  User,
  FileText,
  Clock,
  Award,
  AlertTriangle,
} from "lucide-react";

interface ReportDisplayProps {
  report?: ReportData | null;
}

const ReportDisplay: React.FC<ReportDisplayProps> = ({ report }) => {
  // Handle case where report is undefined or null
  if (!report) {
    return (
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="text-center text-muted-foreground">
            <AlertTriangle className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No report data available</p>
            <p className="text-sm mt-2">Please generate a report first</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const renderSchoolInfo = () => {
    if (!report.schoolInfo) return null;
    return (
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border mb-4">
        <div className="flex items-center gap-3 mb-4">
          <Building2 className="h-8 w-8 text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {report.schoolInfo.name}
            </h2>
            <p className="text-gray-600">Educational Institution</p>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {report.schoolInfo.address && (
            <div className="flex items-center gap-2">
              <MapPin className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{report.schoolInfo.address}</span>
            </div>
          )}
          {report.schoolInfo.phone && (
            <div className="flex items-center gap-2">
              <Phone className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{report.schoolInfo.phone}</span>
            </div>
          )}
          {report.schoolInfo.email && (
            <div className="flex items-center gap-2">
              <Mail className="h-4 w-4 text-gray-500" />
              <span className="text-sm">{report.schoolInfo.email}</span>
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderReportHeader = () => {
    return (
      <div className="bg-white p-6 rounded-lg border mb-6">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              {report.title || "Report"}
            </h1>
            <div className="space-y-1 text-sm text-gray-600">
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                <span>
                  Generated on:{" "}
                  {report.generatedAt
                    ? format(new Date(report.generatedAt), "PPP 'at' p")
                    : "Unknown"}
                </span>
              </div>
              {report.generatedBy && (
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4" />
                  <span>Generated by: {report.generatedBy}</span>
                </div>
              )}
            </div>
          </div>
          <div className="text-right">
            <Badge variant="outline" className="text-sm">
              {report.role
                ? report.role.replace("_", " ").toUpperCase()
                : "REPORT"}
            </Badge>
          </div>
        </div>
      </div>
    );
  };

  const renderContentSummary = () => {
    if (!report.content) return null;

    const contentKeys = Object.keys(report.content);
    if (contentKeys.length === 0) return null;

    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Report Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {contentKeys.map((key, index) => {
              const data = report.content[key];
              const count = Array.isArray(data) ? data.length : 0;

              return (
                <div key={key} className="bg-blue-50 p-4 rounded-lg">
                  <div className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-blue-600" />
                    <span className="font-semibold text-blue-800 capitalize">
                      {key.replace(/_/g, " ")}
                    </span>
                  </div>
                  <p className="text-2xl font-bold text-blue-600 mt-2">
                    {count}
                  </p>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    );
  };

  const renderContentData = () => {
    if (!report.content) {
      return (
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="text-center text-muted-foreground">
              <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>No data available for this report</p>
            </div>
          </CardContent>
        </Card>
      );
    }

    const contentKeys = Object.keys(report.content);

    return contentKeys.map((key) => {
      const data = report.content[key];
      if (!Array.isArray(data) || data.length === 0) return null;

      // Get column headers from the first data item
      const firstItem = data[0];
      const columns = firstItem ? Object.keys(firstItem) : [];

      return (
        <Card key={key} className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 capitalize">
              <Table className="h-5 w-5" />
              {key.replace(/_/g, " ")} Data
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    {columns.map((column) => (
                      <TableHead key={column} className="capitalize">
                        {column.replace(/_/g, " ")}
                      </TableHead>
                    ))}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {data.slice(0, 10).map((row, index) => (
                    <TableRow key={index}>
                      {columns.map((column) => (
                        <TableCell key={column}>
                          {renderCellValue(row[column as keyof typeof row])}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              {data.length > 10 && (
                <div className="text-center mt-4 text-sm text-muted-foreground">
                  Showing first 10 of {data.length} records
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      );
    });
  };

  const renderCellValue = (value: unknown): React.ReactNode => {
    if (value === null || value === undefined) {
      return <span className="text-muted-foreground">N/A</span>;
    }

    if (typeof value === "boolean") {
      return value ? (
        <CheckCircle className="h-4 w-4 text-green-600" />
      ) : (
        <XCircle className="h-4 w-4 text-red-600" />
      );
    }

    if (typeof value === "number") {
      return value.toLocaleString();
    }

    if (typeof value === "string") {
      // Check if it's a date string
      if (value.match(/^\d{4}-\d{2}-\d{2}/)) {
        try {
          return format(new Date(value), "PPP");
        } catch {
          return value;
        }
      }
      return value;
    }

    if (typeof value === "object") {
      // Handle nested objects (like joined data)
      if (value && typeof value === "object" && "name" in value) {
        return (value as { name?: string }).name || "N/A";
      }
      return <span className="text-muted-foreground">Object</span>;
    }

    return String(value);
  };

  const renderFooter = () => {
    return (
      <div className="bg-gray-50 p-6 rounded-lg border mt-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Building2 className="h-5 w-5 text-gray-500" />
            <span className="text-sm text-gray-600">
              EduFam School Management System
            </span>
          </div>
          <div className="text-sm text-gray-500">
            Report ID: {report.id || "N/A"}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {renderSchoolInfo()}
      {renderReportHeader()}
      {renderContentSummary()}
      {renderContentData()}
      {renderFooter()}
    </div>
  );
};

export default ReportDisplay;
