// Enhanced Report Export Service

import { ReportData } from './unifiedReportService';
import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';
import { format } from 'date-fns';

export const reportExportService = {
  async exportReport(reportData: ReportData, fileName: string, format: 'pdf' | 'excel') {
    if (format === 'pdf') {
      await this.generatePDFReport(reportData, fileName);
    } else if (format === 'excel') {
      await this.generateExcelReport(reportData, fileName);
    }
  },

  async generatePDFReport(reportData: ReportData, fileName: string) {
    const doc = new jsPDF();
    
    // Set up fonts and styling
    doc.setFont('helvetica');
    
    // Header
    doc.setFontSize(24);
    doc.setTextColor(30, 30, 30);
    doc.text(reportData.title, 20, 30);
    
    // Subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${format(new Date(reportData.generatedAt), 'PPP \'at\' p')}`, 20, 40);
    doc.text(`Generated by: ${reportData.generatedBy} (${reportData.role.replace('_', ' ')})`, 20, 47);
    
    if (reportData.schoolInfo) {
      doc.text(`School: ${reportData.schoolInfo.name}`, 20, 54);
    }
    
    // Divider
    doc.setDrawColor(200, 200, 200);
    doc.line(20, 60, 190, 60);
    
    let yPosition = 75;
    
    // Schools Summary
    if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
      yPosition = this.addSectionHeader(doc, 'Schools Summary', yPosition);
      yPosition = this.addSchoolsTable(doc, reportData.content.schools, yPosition);
    }
    
    // Users Summary
    if (reportData.content.users && Array.isArray(reportData.content.users)) {
      yPosition = this.addSectionHeader(doc, 'Users Summary', yPosition);
      yPosition = this.addUsersTable(doc, reportData.content.users, yPosition);
    }
    
    // Financial Summary
    if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
      yPosition = this.addSectionHeader(doc, 'Financial Summary', yPosition);
      yPosition = this.addFinancialTable(doc, reportData.content.transactions, yPosition);
    }
    
    // Grades Summary
    if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
      yPosition = this.addSectionHeader(doc, 'Academic Performance Summary', yPosition);
      yPosition = this.addGradesTable(doc, reportData.content.grades, yPosition);
    }
    
    // Attendance Summary
    if (reportData.content.attendance && Array.isArray(reportData.content.attendance)) {
      yPosition = this.addSectionHeader(doc, 'Attendance Summary', yPosition);
      yPosition = this.addAttendanceTable(doc, reportData.content.attendance, yPosition);
    }
    
    // Footer
    this.addFooter(doc);
    
    doc.save(`${fileName}.pdf`);
  },

  async generateExcelReport(reportData: ReportData, fileName: string) {
    const workbook = XLSX.utils.book_new();
    
    // Summary sheet
    const summaryData = [
      { 'Report Title': reportData.title },
      { 'Generated On': format(new Date(reportData.generatedAt), 'PPP \'at\' p') },
      { 'Generated By': `${reportData.generatedBy} (${reportData.role.replace('_', ' ')})` },
      { 'School': reportData.schoolInfo?.name || 'N/A' },
      {},
      { 'Summary Statistics': '' },
    ];
    
    // Add summary statistics
    if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
      summaryData.push(
        { 'Total Schools': reportData.content.schools.length },
        { 'Active Schools': reportData.content.schools.filter(s => s.status === 'active').length }
      );
    }
    
    if (reportData.content.users && Array.isArray(reportData.content.users)) {
      summaryData.push({ 'Total Users': reportData.content.users.length });
    }
    
    if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
      const totalAmount = reportData.content.transactions.reduce((sum, t) => sum + (Number(t.amount) || 0), 0);
      summaryData.push({ 'Total Revenue (KES)': totalAmount.toLocaleString() });
    }
    
    if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
      const averageScore = reportData.content.grades.reduce((sum, grade) => sum + (grade.percentage || 0), 0) / reportData.content.grades.length;
      summaryData.push({ 'Average Score (%)': averageScore.toFixed(1) });
    }
    
    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
    
    // Schools sheet
    if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
      const schoolsData = reportData.content.schools.map(school => ({
        'School Name': school.name,
        'Address': school.address || 'N/A',
        'Phone': school.phone || 'N/A',
        'Email': school.email || 'N/A',
        'Status': school.status || 'Active',
        'Subscription Plan': school.subscription_plan || 'Basic',
        'Max Students': school.max_students || 0,
        'Created Date': school.created_at ? format(new Date(school.created_at), 'MMM dd, yyyy') : 'N/A'
      }));
      
      const schoolsSheet = XLSX.utils.json_to_sheet(schoolsData);
      XLSX.utils.book_append_sheet(workbook, schoolsSheet, 'Schools');
    }
    
    // Users sheet
    if (reportData.content.users && Array.isArray(reportData.content.users)) {
      const usersData = reportData.content.users.map(user => ({
        'Name': user.name || 'N/A',
        'Email': user.email || 'N/A',
        'Role': user.role || 'N/A',
        'Status': user.is_active ? 'Active' : 'Inactive',
        'Created Date': user.created_at ? format(new Date(user.created_at), 'MMM dd, yyyy') : 'N/A'
      }));
      
      const usersSheet = XLSX.utils.json_to_sheet(usersData);
      XLSX.utils.book_append_sheet(workbook, usersSheet, 'Users');
    }
    
    // Financial sheet
    if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
      const transactionsData = reportData.content.transactions.map(transaction => ({
        'Date': transaction.created_at ? format(new Date(transaction.created_at), 'MMM dd, yyyy') : 'N/A',
        'Student': transaction.student?.name || 'N/A',
        'Amount (KES)': Number(transaction.amount) || 0,
        'Type': transaction.transaction_type || 'N/A',
        'Method': transaction.payment_method || 'Cash',
        'Status': transaction.status || 'N/A'
      }));
      
      const transactionsSheet = XLSX.utils.json_to_sheet(transactionsData);
      XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'Financial Transactions');
    }
    
    // Grades sheet
    if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
      const gradesData = reportData.content.grades.map(grade => ({
        'Student': grade.student?.name || 'N/A',
        'Subject': grade.subject?.name || 'N/A',
        'Score': `${grade.score}/${grade.max_score}`,
        'Grade': grade.letter_grade || 'N/A',
        'Percentage': grade.percentage || 0,
        'Status': grade.status || 'N/A'
      }));
      
      const gradesSheet = XLSX.utils.json_to_sheet(gradesData);
      XLSX.utils.book_append_sheet(workbook, gradesSheet, 'Academic Performance');
    }
    
    // Attendance sheet
    if (reportData.content.attendance && Array.isArray(reportData.content.attendance)) {
      const attendanceData = reportData.content.attendance.map(record => ({
        'Date': format(new Date(record.date), 'MMM dd, yyyy'),
        'Student': record.student?.name || 'N/A',
        'Class': record.class?.name || 'N/A',
        'Status': record.status || 'N/A',
        'Time': record.created_at ? format(new Date(record.created_at), 'HH:mm') : 'N/A'
      }));
      
      const attendanceSheet = XLSX.utils.json_to_sheet(attendanceData);
      XLSX.utils.book_append_sheet(workbook, attendanceSheet, 'Attendance');
    }
    
    XLSX.writeFile(workbook, `${fileName}.xlsx`);
  },

  // Helper methods for PDF generation
  addSectionHeader(doc: jsPDF, title: string, yPosition: number): number {
    doc.setFontSize(16);
    doc.setTextColor(30, 30, 30);
    doc.text(title, 20, yPosition);
    doc.setDrawColor(200, 200, 200);
    doc.line(20, yPosition + 2, 190, yPosition + 2);
    return yPosition + 15;
  },

  addSchoolsTable(doc: jsPDF, schools: any[], yPosition: number): number {
    const headers = ['School Name', 'Address', 'Phone', 'Status'];
    const data = schools.map(school => [
      school.name || 'N/A',
      school.address || 'N/A',
      school.phone || 'N/A',
      school.status || 'Active'
    ]);
    
    return this.addTable(doc, headers, data, yPosition);
  },

  addUsersTable(doc: jsPDF, users: any[], yPosition: number): number {
    const headers = ['Name', 'Email', 'Role', 'Status'];
    const data = users.map(user => [
      user.name || 'N/A',
      user.email || 'N/A',
      user.role || 'N/A',
      user.is_active ? 'Active' : 'Inactive'
    ]);
    
    return this.addTable(doc, headers, data, yPosition);
  },

  addFinancialTable(doc: jsPDF, transactions: any[], yPosition: number): number {
    const headers = ['Date', 'Student', 'Amount (KES)', 'Type', 'Status'];
    const data = transactions.slice(0, 10).map(transaction => [
      format(new Date(transaction.created_at), 'MMM dd'),
      transaction.student?.name || 'N/A',
      Number(transaction.amount).toLocaleString(),
      transaction.transaction_type || 'N/A',
      transaction.status || 'N/A'
    ]);
    
    return this.addTable(doc, headers, data, yPosition);
  },

  addGradesTable(doc: jsPDF, grades: any[], yPosition: number): number {
    const headers = ['Student', 'Subject', 'Score', 'Grade', 'Percentage'];
    const data = grades.slice(0, 10).map(grade => [
      grade.student?.name || 'N/A',
      grade.subject?.name || 'N/A',
      `${grade.score}/${grade.max_score}`,
      grade.letter_grade || 'N/A',
      `${grade.percentage}%`
    ]);
    
    return this.addTable(doc, headers, data, yPosition);
  },

  addAttendanceTable(doc: jsPDF, attendance: any[], yPosition: number): number {
    const headers = ['Date', 'Student', 'Class', 'Status'];
    const data = attendance.slice(0, 10).map(record => [
      format(new Date(record.date), 'MMM dd'),
      record.student?.name || 'N/A',
      record.class?.name || 'N/A',
      record.status || 'N/A'
    ]);
    
    return this.addTable(doc, headers, data, yPosition);
  },

  addTable(doc: jsPDF, headers: string[], data: string[][], yPosition: number): number {
    const pageHeight = doc.internal.pageSize.height;
    const rowHeight = 8;
    const colWidths = [50, 50, 30, 30];
    
    // Check if we need a new page
    if (yPosition + (data.length + 1) * rowHeight > pageHeight - 30) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Headers
    doc.setFontSize(10);
    doc.setTextColor(255, 255, 255);
    doc.setFillColor(59, 130, 246);
    
    let xPos = 20;
    headers.forEach((header, index) => {
      doc.rect(xPos, yPosition - 5, colWidths[index], rowHeight, 'F');
      doc.text(header, xPos + 2, yPosition);
      xPos += colWidths[index];
    });
    
    // Data rows
    doc.setTextColor(30, 30, 30);
    doc.setFillColor(255, 255, 255);
    
    data.forEach((row, rowIndex) => {
      const currentY = yPosition + (rowIndex + 1) * rowHeight;
      
      // Check if we need a new page
      if (currentY > pageHeight - 30) {
        doc.addPage();
        yPosition = 20;
        return yPosition;
      }
      
      xPos = 20;
      row.forEach((cell, colIndex) => {
        doc.rect(xPos, currentY - 5, colWidths[colIndex], rowHeight, 'S');
        doc.text(cell, xPos + 2, currentY);
        xPos += colWidths[colIndex];
      });
    });
    
    return yPosition + (data.length + 2) * rowHeight;
  },

  addFooter(doc: jsPDF) {
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Powered by EduFam Education Management System', 20, pageHeight - 20);
    doc.text(`Generated on ${format(new Date(), 'MMM dd, yyyy HH:mm')}`, 20, pageHeight - 15);
  },

  async shareReport(reportId: string) {
    // Stub: Implement sharing logic (e.g., upload to cloud, email, etc.)
    return Promise.resolve();
  },
}; 