// Enhanced Report Export Service

import { ReportData } from './unifiedReportService';
import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';
import { format } from 'date-fns';

interface SchoolData {
  name: string;
  address?: string;
  phone?: string;
  email?: string;
  status?: string;
  subscription_plan?: string;
  max_students?: number;
  created_at?: string;
}

interface UserData {
  name?: string;
  email?: string;
  role?: string;
  is_active?: boolean;
  created_at?: string;
}

interface TransactionData {
  amount: number | string;
  transaction_type?: string;
  payment_method?: string;
  status?: string;
  created_at?: string;
  student?: {
    name?: string;
  };
}

interface GradeData {
  score: number;
  max_score: number;
  letter_grade?: string;
  percentage?: number;
  status?: string;
  student?: {
    name?: string;
  };
  subject?: {
    name?: string;
  };
}

interface AttendanceData {
  date: string;
  status?: string;
  created_at?: string;
  student?: {
    name?: string;
  };
  class?: {
    name?: string;
  };
}

export const reportExportService = {
  // Enhanced data validation
  validateReportData(reportData: ReportData): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!reportData) {
      errors.push('Report data is null or undefined');
      return { isValid: false, errors };
    }

    if (!reportData.title || typeof reportData.title !== 'string') {
      errors.push('Report title is required and must be a string');
    }

    if (!reportData.generatedAt) {
      errors.push('Report generation timestamp is required');
    }

    if (!reportData.generatedBy || typeof reportData.generatedBy !== 'string') {
      errors.push('Report generator information is required');
    }

    if (!reportData.role || typeof reportData.role !== 'string') {
      errors.push('User role is required');
    }

    if (!reportData.content || typeof reportData.content !== 'object') {
      errors.push('Report content is required and must be an object');
    }

    return { isValid: errors.length === 0, errors };
  },

  async exportReport(reportData: ReportData, fileName: string, format: 'pdf' | 'excel') {
    try {
      // Validate report data before export
      const validation = this.validateReportData(reportData);
      if (!validation.isValid) {
        throw new Error(`Invalid report data: ${validation.errors.join(', ')}`);
      }

      if (format === 'pdf') {
        await this.generatePDFReport(reportData, fileName);
      } else if (format === 'excel') {
        await this.generateExcelReport(reportData, fileName);
      } else {
        throw new Error(`Unsupported export format: ${format}`);
      }
    } catch (error) {
      console.error('Error exporting report:', error);
      throw new Error(`Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  async generatePDFReport(reportData: ReportData, fileName: string) {
    try {
      console.log('Starting PDF report generation...');
      
      const doc = new jsPDF();
      
      // Set up fonts and styling
      doc.setFont('helvetica');
      
      // Enhanced header with professional styling
      doc.setFillColor(25, 118, 210);
      doc.rect(0, 0, 210, 30, 'F');
      
      doc.setFontSize(24);
      doc.setTextColor(255, 255, 255);
      doc.text('EduFam', 20, 18);
      
      doc.setFontSize(12);
      doc.text('Educational Technology Platform', 20, 25);
      
      // Report title
      doc.setFontSize(20);
      doc.setTextColor(25, 118, 210);
      doc.text(reportData.title, 20, 45);
      
      // Subtitle with enhanced formatting
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      doc.text(`Generated on: ${format(new Date(reportData.generatedAt), 'PPP \'at\' p')}`, 20, 55);
      doc.text(`Generated by: ${reportData.generatedBy} (${reportData.role.replace('_', ' ')})`, 20, 62);
      
      if (reportData.schoolInfo) {
        doc.text(`School: ${reportData.schoolInfo.name}`, 20, 69);
      }
      
      // Professional divider
      doc.setDrawColor(25, 118, 210);
      doc.setLineWidth(1.5);
      doc.line(20, 75, 190, 75);
      
      let yPosition = 85;
      
      // Schools Summary with enhanced styling
      if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
        yPosition = this.addSectionHeader(doc, 'üè´ Schools Summary', yPosition);
        yPosition = this.addSchoolsTable(doc, reportData.content.schools, yPosition);
      }
      
      // Users Summary
      if (reportData.content.users && Array.isArray(reportData.content.users)) {
        yPosition = this.addSectionHeader(doc, 'üë• Users Summary', yPosition);
        yPosition = this.addUsersTable(doc, reportData.content.users, yPosition);
      }
      
      // Financial Summary
      if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
        yPosition = this.addSectionHeader(doc, 'üí∞ Financial Summary', yPosition);
        yPosition = this.addFinancialTable(doc, reportData.content.transactions, yPosition);
      }
      
      // Grades Summary
      if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
        yPosition = this.addSectionHeader(doc, 'üìä Academic Performance Summary', yPosition);
        yPosition = this.addGradesTable(doc, reportData.content.grades, yPosition);
      }
      
      // Attendance Summary
      if (reportData.content.attendance && Array.isArray(reportData.content.attendance)) {
        yPosition = this.addSectionHeader(doc, 'üìÖ Attendance Summary', yPosition);
        yPosition = this.addAttendanceTable(doc, reportData.content.attendance, yPosition);
      }
      
      // Enhanced footer
      this.addFooter(doc);
      
      const finalFileName = `${fileName}.pdf`;
      doc.save(finalFileName);
      
      console.log(`PDF report saved as: ${finalFileName}`);
      
    } catch (error) {
      console.error('Error generating PDF report:', error);
      throw new Error(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  async generateExcelReport(reportData: ReportData, fileName: string) {
    try {
      console.log('Starting Excel report generation...');
      
      const workbook = XLSX.utils.book_new();
      
      // Summary sheet with enhanced formatting
      const summaryData: Array<Record<string, string>> = [
        { 'Report Title': reportData.title },
        { 'Generated On': format(new Date(reportData.generatedAt), 'PPP \'at\' p') },
        { 'Generated By': `${reportData.generatedBy} (${reportData.role.replace('_', ' ')})` },
        { 'School': reportData.schoolInfo?.name || 'N/A' },
        {},
        { 'Summary Statistics': '' },
      ];
      
      // Add summary statistics
      if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
        summaryData.push(
          { 'Total Schools': reportData.content.schools.length.toString() },
          { 'Active Schools': reportData.content.schools.filter((s: SchoolData) => s.status === 'active').length.toString() }
        );
      }
      
      if (reportData.content.users && Array.isArray(reportData.content.users)) {
        summaryData.push({ 'Total Users': reportData.content.users.length.toString() });
      }
      
      if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
        const totalAmount = reportData.content.transactions.reduce((sum: number, t: TransactionData) => sum + (Number(t.amount) || 0), 0);
        summaryData.push({ 'Total Revenue KES': totalAmount.toLocaleString() });
      }
      
      if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
        const averageScore = reportData.content.grades.reduce((sum: number, grade: GradeData) => sum + (grade.percentage || 0), 0) / reportData.content.grades.length;
        summaryData.push({ 'Average Score Percent': averageScore.toFixed(1) });
      }
      
      const summarySheet = XLSX.utils.json_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
      
      // Schools sheet with enhanced data
      if (reportData.content.schools && Array.isArray(reportData.content.schools)) {
        const schoolsData = reportData.content.schools.map(school => ({
          'School Name': school.name,
          'Address': school.address || 'N/A',
          'Phone': school.phone || 'N/A',
          'Email': school.email || 'N/A',
          'Status': school.status || 'Active',
          'Subscription Plan': school.subscription_plan || 'Basic',
          'Max Students': school.max_students || 0,
          'Created Date': school.created_at ? format(new Date(school.created_at), 'MMM dd, yyyy') : 'N/A'
        }));
        
        const schoolsSheet = XLSX.utils.json_to_sheet(schoolsData);
        XLSX.utils.book_append_sheet(workbook, schoolsSheet, 'Schools');
      }
      
      // Users sheet
      if (reportData.content.users && Array.isArray(reportData.content.users)) {
        const usersData = reportData.content.users.map(user => ({
          'Name': user.name || 'N/A',
          'Email': user.email || 'N/A',
          'Role': user.role || 'N/A',
          'Status': user.is_active ? 'Active' : 'Inactive',
          'Created Date': user.created_at ? format(new Date(user.created_at), 'MMM dd, yyyy') : 'N/A'
        }));
        
        const usersSheet = XLSX.utils.json_to_sheet(usersData);
        XLSX.utils.book_append_sheet(workbook, usersSheet, 'Users');
      }
      
      // Financial sheet
      if (reportData.content.transactions && Array.isArray(reportData.content.transactions)) {
        const financialData = reportData.content.transactions.map(transaction => ({
          'Student': transaction.student?.name || 'N/A',
          'Amount': Number(transaction.amount).toLocaleString(),
          'Type': transaction.transaction_type || 'N/A',
          'Method': transaction.payment_method || 'N/A',
          'Status': transaction.status || 'N/A',
          'Date': transaction.created_at ? format(new Date(transaction.created_at), 'MMM dd, yyyy') : 'N/A'
        }));
        
        const financialSheet = XLSX.utils.json_to_sheet(financialData);
        XLSX.utils.book_append_sheet(workbook, financialSheet, 'Financial');
      }
      
      // Grades sheet
      if (reportData.content.grades && Array.isArray(reportData.content.grades)) {
        const gradesData = reportData.content.grades.map(grade => ({
          'Student': grade.student?.name || 'N/A',
          'Subject': grade.subject?.name || 'N/A',
          'Score': grade.score,
          'Max Score': grade.max_score,
          'Percentage': grade.percentage?.toFixed(1) || 'N/A',
          'Letter Grade': grade.letter_grade || 'N/A',
          'Status': grade.status || 'N/A'
        }));
        
        const gradesSheet = XLSX.utils.json_to_sheet(gradesData);
        XLSX.utils.book_append_sheet(workbook, gradesSheet, 'Grades');
      }
      
      // Attendance sheet
      if (reportData.content.attendance && Array.isArray(reportData.content.attendance)) {
        const attendanceData = reportData.content.attendance.map(attendance => ({
          'Student': attendance.student?.name || 'N/A',
          'Class': attendance.class?.name || 'N/A',
          'Date': attendance.date,
          'Status': attendance.status || 'N/A',
          'Created': attendance.created_at ? format(new Date(attendance.created_at), 'MMM dd, yyyy') : 'N/A'
        }));
        
        const attendanceSheet = XLSX.utils.json_to_sheet(attendanceData);
        XLSX.utils.book_append_sheet(workbook, attendanceSheet, 'Attendance');
      }
      
      const finalFileName = `${fileName}.xlsx`;
      XLSX.writeFile(workbook, finalFileName);
      
      console.log(`Excel report saved as: ${finalFileName}`);
      
    } catch (error) {
      console.error('Error generating Excel report:', error);
      throw new Error(`Excel generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  addSectionHeader(doc: jsPDF, title: string, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(25, 118, 210);
    doc.text(title, 20, yPosition);
    
    // Add separator line
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(20, yPosition + 2, 190, yPosition + 2);
    
    return yPosition + 15;
  },

  addSchoolsTable(doc: jsPDF, schools: SchoolData[], yPosition: number): number {
    const headers = ['School Name', 'Address', 'Phone', 'Email', 'Status', 'Plan'];
    const data = schools.map(school => [
      school.name,
      school.address || 'N/A',
      school.phone || 'N/A',
      school.email || 'N/A',
      school.status || 'Active',
      school.subscription_plan || 'Basic'
    ]);

    return this.addTable(doc, headers, data, yPosition);
  },

  addUsersTable(doc: jsPDF, users: UserData[], yPosition: number): number {
    const headers = ['Name', 'Email', 'Role', 'Status', 'Created'];
    const data = users.map(user => [
      user.name || 'N/A',
      user.email || 'N/A',
      user.role || 'N/A',
      user.is_active ? 'Active' : 'Inactive',
      user.created_at ? format(new Date(user.created_at), 'MMM dd, yyyy') : 'N/A'
    ]);

    return this.addTable(doc, headers, data, yPosition);
  },

  addFinancialTable(doc: jsPDF, transactions: TransactionData[], yPosition: number): number {
    const headers = ['Student', 'Amount', 'Type', 'Method', 'Status'];
    const data = transactions.map(transaction => [
      transaction.student?.name || 'N/A',
      `KES ${Number(transaction.amount).toLocaleString()}`,
      transaction.transaction_type || 'N/A',
      transaction.payment_method || 'N/A',
      transaction.status || 'N/A'
    ]);

    return this.addTable(doc, headers, data, yPosition);
  },

  addGradesTable(doc: jsPDF, grades: GradeData[], yPosition: number): number {
    const headers = ['Student', 'Subject', 'Score', 'Percentage', 'Grade'];
    const data = grades.map(grade => [
      grade.student?.name || 'N/A',
      grade.subject?.name || 'N/A',
      `${grade.score}/${grade.max_score}`,
      `${grade.percentage?.toFixed(1)}%`,
      grade.letter_grade || 'N/A'
    ]);

    return this.addTable(doc, headers, data, yPosition);
  },

  addAttendanceTable(doc: jsPDF, attendance: AttendanceData[], yPosition: number): number {
    const headers = ['Student', 'Class', 'Date', 'Status'];
    const data = attendance.map(attendance => [
      attendance.student?.name || 'N/A',
      attendance.class?.name || 'N/A',
      attendance.date,
      attendance.status || 'N/A'
    ]);

    return this.addTable(doc, headers, data, yPosition);
  },

  addTable(doc: jsPDF, headers: string[], data: string[][], yPosition: number): number {
    try {
      (doc as jsPDF & { autoTable: (options: unknown) => void }).autoTable({
        head: [headers],
        body: data,
        startY: yPosition,
        theme: 'grid',
        headStyles: {
          fillColor: [25, 118, 210],
          textColor: 255,
          fontSize: 11,
          fontStyle: 'bold'
        },
        bodyStyles: {
          fontSize: 9,
          textColor: [60, 60, 60]
        },
        alternateRowStyles: {
          fillColor: [248, 249, 250]
        },
        margin: { left: 20, right: 20 }
      });

             return (doc as jsPDF & { lastAutoTable: { finalY: number } }).lastAutoTable.finalY + 20;
    } catch (error) {
      console.error('Error adding table to PDF:', error);
      return yPosition + 50; // Fallback position
    }
  },

  addFooter(doc: jsPDF) {
    try {
      const pageHeight = doc.internal.pageSize.height;
      
      // Footer background
      doc.setFillColor(248, 249, 250);
      doc.rect(0, pageHeight - 30, 210, 30, 'F');
      
      // Footer content
      doc.setFontSize(9);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(100, 100, 100);
      
      const now = new Date();
      doc.text(`Generated: ${now.toLocaleDateString('en-KE')} ${now.toLocaleTimeString('en-KE')}`, 20, pageHeight - 15);
      doc.text('Powered by EduFam Educational Technology Platform', 105, pageHeight - 15, { align: 'center' });
      doc.text('¬© 2024 EduFam Platform', 190, pageHeight - 15, { align: 'right' });
    } catch (error) {
      console.error('Error adding footer to PDF:', error);
    }
  },

  async shareReport(reportId: string) {
    try {
      // Implementation for sharing reports
      console.log(`Sharing report with ID: ${reportId}`);
      return { success: true, shareUrl: `https://edufam.com/reports/${reportId}` };
    } catch (error) {
      console.error('Error sharing report:', error);
      throw new Error(`Share failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}; 