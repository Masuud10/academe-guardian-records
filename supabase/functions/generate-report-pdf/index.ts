
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { reportData, format } = await req.json();

    if (!reportData) {
      return new Response(
        JSON.stringify({ error: 'Report data is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Simple HTML to PDF conversion (you can enhance this with a proper PDF library)
    const htmlContent = generateReportHTML(reportData);
    
    // For now, return HTML content - in production, you'd convert this to PDF
    return new Response(htmlContent, {
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="${reportData.title.replace(/\s+/g, '_')}.html"`
      }
    });

  } catch (error) {
    console.error('Error generating report:', error);
    return new Response(
      JSON.stringify({ error: 'Failed to generate report' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

function generateReportHTML(reportData: any): string {
  const { title, data, generatedAt, filters } = reportData;
  
  let tableHTML = '';
  if (data && data.length > 0) {
    const headers = Object.keys(data[0]);
    tableHTML = `
      <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
          <tr style="background-color: #f8f9fa;">
            ${headers.map(header => 
              `<th style="border: 1px solid #dee2e6; padding: 8px; text-align: left;">
                ${header.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </th>`
            ).join('')}
          </tr>
        </thead>
        <tbody>
          ${data.map((row: any) => `
            <tr>
              ${headers.map(header => 
                `<td style="border: 1px solid #dee2e6; padding: 8px;">
                  ${typeof row[header] === 'object' ? JSON.stringify(row[header]) : row[header] || ''}
                </td>`
              ).join('')}
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { border-bottom: 2px solid #007bff; padding-bottom: 10px; margin-bottom: 20px; }
        .title { color: #007bff; margin: 0; }
        .subtitle { color: #6c757d; margin: 5px 0; }
        .filters { background-color: #f8f9fa; padding: 10px; border-radius: 5px; margin-bottom: 20px; }
        table { font-size: 12px; }
        th { background-color: #007bff; color: white; }
        tr:nth-child(even) { background-color: #f8f9fa; }
        .footer { margin-top: 30px; padding-top: 10px; border-top: 1px solid #dee2e6; font-size: 12px; color: #6c757d; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1 class="title">${title}</h1>
        <p class="subtitle">Generated on ${new Date(generatedAt).toLocaleString()}</p>
        <p class="subtitle">Total Records: ${data ? data.length : 0}</p>
      </div>
      
      <div class="filters">
        <strong>Applied Filters:</strong>
        <ul>
          ${Object.entries(filters || {}).map(([key, value]) => 
            value ? `<li>${key.replace(/_/g, ' ')}: ${value}</li>` : ''
          ).join('')}
        </ul>
      </div>
      
      ${tableHTML}
      
      <div class="footer">
        <p>Generated by EduFam Admin Dashboard - ${new Date().getFullYear()}</p>
      </div>
    </body>
    </html>
  `;
}
