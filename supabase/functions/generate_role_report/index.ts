// Edge Function: generate_role_report
// Generates a report for grades/attendance with correct scope for teachers, principals, admins.

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.50.0";
import * as XLSX from "https://esm.sh/xlsx@0.18.5";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }
  let event;
  try {
    event = await req.json();
  } catch {
    return new Response(JSON.stringify({ error: "Invalid JSON" }), { status: 400, headers: corsHeaders });
  }

  const { role, school_id, class_id, type, term, user_id } = event;
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL")!,
    Deno.env.get("SUPABASE_ANON_KEY")!,
  );

  // Get school info
  let schoolInfo = null;
  if (school_id) {
    const { data } = await supabase.from("schools").select("id, name, logo_url").eq("id", school_id).maybeSingle();
    schoolInfo = data;
  }

  let resultRows = [];
  let reportTitle = "";
  if (type === "grades") {
    reportTitle = `Grades Report`;
    if (role === "teacher") {
      const { data, error } = await supabase
        .from("grades")
        .select("*")
        .eq("class_id", class_id)
        .eq("term", term);
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    } else if (role === "principal") {
      const { data, error } = await supabase
        .from("grades")
        .select("*")
        .eq("school_id", school_id)
        .eq("term", term);
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    } else if (role === "edufam_admin") {
      let query = supabase
        .from("grades")
        .select("school_id, class_id, student_id, percentage, term")
        .eq("term", term);
      
      if (school_id) {
        query = query.eq("school_id", school_id);
        reportTitle = `Grades Report (For ${schoolInfo?.name || 'Selected School'})`;
      } else {
        reportTitle = `Grades Report (All Schools)`;
      }

      const { data, error } = await query;
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    }
  } else if (type === "attendance") {
    reportTitle = `Attendance Report`;
    if (role === "teacher") {
      const { data, error } = await supabase
        .from("attendance")
        .select("*")
        .eq("class_id", class_id)
        .eq("term", term);
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    } else if (role === "principal") {
      const { data, error } = await supabase
        .from("attendance")
        .select("*")
        .eq("school_id", school_id)
        .eq("term", term);
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    } else if (role === "edufam_admin") {
      let query = supabase
        .from("attendance")
        .select("school_id, class_id, student_id, status, session, date, term")
        .eq("term", term);

      if (school_id) {
        query = query.eq("school_id", school_id);
        reportTitle = `Attendance Report (For ${schoolInfo?.name || 'Selected School'})`;
      } else {
        reportTitle = `Attendance Report (All Schools)`;
      }
        
      const { data, error } = await query;
      if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });
      resultRows = data || [];
    }
  } else {
    return new Response(JSON.stringify({ error: "Unknown report type" }), { status: 400, headers: corsHeaders });
  }

  // Include school info and report title
  const metaData = {
    School: schoolInfo?.name || "",
    "Report Title": reportTitle,
    Term: term,
    Generated: new Date().toLocaleString(),
    "Generated By": role,
    Company: "Edufam Systems",
  };

  // Build file (Excel/xlsx)
  const sheet = XLSX.utils.json_to_sheet([
    metaData,
    ...resultRows
  ]);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, sheet, "Report");
  const xlsxData = XLSX.write(wb, { bookType: "xlsx", type: "array" });

  return new Response(xlsxData, {
    status: 200,
    headers: {
      ...corsHeaders,
      "Content-Type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "Content-Disposition": `attachment; filename="${reportTitle.replace(/ /g,"_")}_${term}.xlsx"`
    },
  });
});
